{"Protocols/SecureStore.html#/s:6Common11SecureStoreP4savey10Foundation4DataV4data_SS6forKeytKF":{"name":"save(data:forKey:)","abstract":"<p>Saves the <code>data</code> by <code>forKey</code> key. If the key is already in use, this method throws error.</p>","parent_name":"SecureStore"},"Protocols/SecureStore.html#/s:6Common11SecureStoreP4data10Foundation4DataVSgSS6forKey_tKF":{"name":"data(forKey:)","abstract":"<p>Returns data stored by the key or nil in case it was not found.</p>","parent_name":"SecureStore"},"Protocols/SecureStore.html#/s:6Common11SecureStoreP10removeDataySS6forKey_tKF":{"name":"removeData(forKey:)","abstract":"<p>Removes stored data by key. If there&rsquo;s no data assigned to the key, the method is harmless.</p>","parent_name":"SecureStore"},"Protocols/SecureStore.html#/s:6Common11SecureStoreP7destroyyyKF":{"name":"destroy()","abstract":"<p>Deletes all the data previously stored in the secure store.</p>","parent_name":"SecureStore"},"Protocols/Logger.html#/s:6Common6LoggerP5fatalySS_s5Error_pSg5errors12StaticStringV4fileSu4lineAI8functiontF":{"name":"fatal(_:error:file:line:function:)","abstract":"<p>Indicates a fatal error occurred. The application is supposed to be terminated soon.</p>","parent_name":"Logger"},"Protocols/Logger.html#/s:6Common6LoggerP5errorySS_s5Error_pSgADs12StaticStringV4fileSu4lineAH8functiontF":{"name":"error(_:error:file:line:function:)","abstract":"<p>Indicates that an error occurred. The application is supposed to still work.</p>","parent_name":"Logger"},"Protocols/Logger.html#/s:6Common6LoggerP4infoySS_s5Error_pSg5errors12StaticStringV4fileSu4lineAI8functiontF":{"name":"info(_:error:file:line:function:)","abstract":"<p>Indicates some important information.</p>","parent_name":"Logger"},"Protocols/Logger.html#/s:6Common6LoggerP5debugySS_s5Error_pSg5errors12StaticStringV4fileSu4lineAI8functiontF":{"name":"debug(_:error:file:line:function:)","abstract":"<p>Indicates a debug message.</p>","parent_name":"Logger"},"Protocols/LoggableError.html#/s:6Common13LoggableErrorP02nsC0So7NSErrorCs0C0_pSg8causedBy_tF":{"name":"nsError(causedBy:)","abstract":"<p>Creates <code>NSError</code> and puts the <code>causedBy</code> error into <code>NSError.userInfo</code> dictionary.</p>","parent_name":"LoggableError"},"Protocols/Assertable.html#/s:6Common10AssertableP14assertArgumentySbyKXK_s5Error_ptKF":{"name":"assertArgument(_:_:)","abstract":"<p>Asserts that condition is true, otherwise throws <code>error</code>.</p>","parent_name":"Assertable"},"Protocols/Assertable.html#/s:6Common10AssertableP9assertNilyypSgyKXK_s5Error_ptKF":{"name":"assertNil(_:_:)","abstract":"<p>Asserts that <code>assertion</code> is nil, otherwise throws <code>error</code>.</p>","parent_name":"Assertable"},"Protocols/Assertable.html#/s:6Common10AssertableP12assertNotNilyypSgyKXK_s5Error_ptKF":{"name":"assertNotNil(_:_:)","abstract":"<p>Asserts that <code>assertion</code> is not nil, otherwise throws <code>error</code></p>","parent_name":"Assertable"},"Protocols/Assertable.html#/s:6Common10AssertableP10assertTrueySbyKXK_s5Error_ptKF":{"name":"assertTrue(_:_:)","abstract":"<p>Asserts that <code>assertion</code> is true, otherwise throws <code>error</code>.</p>","parent_name":"Assertable"},"Protocols/Assertable.html#/s:6Common10AssertableP11assertFalseySbyKXK_s5Error_ptKF":{"name":"assertFalse(_:_:)","abstract":"<p>Asserts that <code>assertion</code> is false, otherwise throws <code>error</code>.</p>","parent_name":"Assertable"},"Protocols/Assertable.html#/s:6Common10AssertableP11assertEqualyqd__yKXK_qd__yKXKs5Error_ptKs9EquatableRd__lF":{"name":"assertEqual(_:_:_:)","abstract":"<p>Asserts that two arguments are equal, otherwise throws <code>error</code>.</p>","parent_name":"Assertable"},"Protocols/Assertable.html#/s:6Common10AssertableP14assertNotEqualyqd__yKXK_qd__yKXKs5Error_ptKs9EquatableRd__lF":{"name":"assertNotEqual(_:_:_:)","abstract":"<p>Asserts that two arguments are not equal, otherwise throws <code>error</code>.</p>","parent_name":"Assertable"},"Protocols/Assertable.html":{"name":"Assertable","abstract":"<p><code>Assertable</code> protocol provides utilities to assert method arguments or class invariants and throw error on assertion"},"Protocols/LoggableError.html":{"name":"LoggableError","abstract":"<p>Default implementation of utility to convert any <code>Swift.Error</code> to <code>NSError</code></p>"},"Protocols/Logger.html":{"name":"Logger","abstract":"<p><code>Logger</code> provides means to log different types of messages and accompany them with optional Error objects.</p>"},"Protocols/SecureStore.html":{"name":"SecureStore","abstract":"<p><code>SecureStore</code> defines a protocol of a secure, encrypted store of arbitrary Data referenced by String keys.</p>"},"Extensions/SetAlgebra.html#/s:s10SetAlgebraP6CommonE10intersectsSbx4with_tF":{"name":"intersects(with:)","abstract":"<p>Undocumented</p>","parent_name":"SetAlgebra"},"Extensions/String.html#/s:SS6CommonE18hasUppercaseLetterSbvp":{"name":"hasUppercaseLetter","abstract":"<p>Undocumented</p>","parent_name":"String"},"Extensions/String.html#/s:SS6CommonE15hasDecimalDigitSbvp":{"name":"hasDecimalDigit","abstract":"<p>Undocumented</p>","parent_name":"String"},"Extensions/String.html":{"name":"String"},"Extensions/SetAlgebra.html":{"name":"SetAlgebra"},"Enums/TestLoggableError.html#/s:6Common17TestLoggableErrorO5errorA2CmF":{"name":"error","abstract":"<p>Test error</p>","parent_name":"TestLoggableError"},"Enums/TestLoggableError.html":{"name":"TestLoggableError","abstract":"<p>Loggable error that can be used in tests.</p>"},"Global Variables.html#/s:6Common27LoggableErrorDescriptionKeySSvp":{"name":"LoggableErrorDescriptionKey","abstract":"<p>Undocumented</p>"},"Classes/MockLogger.html#/s:6Common10MockLoggerC11fatalLoggedSbvp":{"name":"fatalLogged","abstract":"<p>Undocumented</p>","parent_name":"MockLogger"},"Classes/MockLogger.html#/s:6Common10MockLoggerC11errorLoggedSbvp":{"name":"errorLogged","abstract":"<p>Undocumented</p>","parent_name":"MockLogger"},"Classes/MockLogger.html#/s:6Common10MockLoggerC10infoLoggedSbvp":{"name":"infoLogged","abstract":"<p>Undocumented</p>","parent_name":"MockLogger"},"Classes/MockLogger.html#/s:6Common10MockLoggerC11debugLoggedSbvp":{"name":"debugLogged","abstract":"<p>Undocumented</p>","parent_name":"MockLogger"},"Classes/MockLogger.html#/s:6Common10MockLoggerCACycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"MockLogger"},"Classes/MockLogger.html#/s:6Common6LoggerP5fatalySS_s5Error_pSg5errors12StaticStringV4fileSu4lineAI8functiontF":{"name":"fatal(_:error:file:line:function:)","parent_name":"MockLogger"},"Classes/MockLogger.html#/s:6Common6LoggerP5errorySS_s5Error_pSgADs12StaticStringV4fileSu4lineAH8functiontF":{"name":"error(_:error:file:line:function:)","parent_name":"MockLogger"},"Classes/MockLogger.html#/s:6Common6LoggerP4infoySS_s5Error_pSg5errors12StaticStringV4fileSu4lineAI8functiontF":{"name":"info(_:error:file:line:function:)","parent_name":"MockLogger"},"Classes/MockLogger.html#/s:6Common6LoggerP5debugySS_s5Error_pSg5errors12StaticStringV4fileSu4lineAI8functiontF":{"name":"debug(_:error:file:line:function:)","parent_name":"MockLogger"},"Classes/InMemorySecureStore.html#/s:6Common19InMemorySecureStoreC11shouldThrowSbvp":{"name":"shouldThrow","abstract":"<p>Undocumented</p>","parent_name":"InMemorySecureStore"},"Classes/InMemorySecureStore.html#/s:6Common19InMemorySecureStoreCACycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"InMemorySecureStore"},"Classes/InMemorySecureStore.html#/s:6Common11SecureStoreP4savey10Foundation4DataV4data_SS6forKeytKF":{"name":"save(data:forKey:)","parent_name":"InMemorySecureStore"},"Classes/InMemorySecureStore.html#/s:6Common11SecureStoreP4data10Foundation4DataVSgSS6forKey_tKF":{"name":"data(forKey:)","parent_name":"InMemorySecureStore"},"Classes/InMemorySecureStore.html#/s:6Common11SecureStoreP10removeDataySS6forKey_tKF":{"name":"removeData(forKey:)","parent_name":"InMemorySecureStore"},"Classes/InMemorySecureStore.html#/s:6Common11SecureStoreP7destroyyyKF":{"name":"destroy()","parent_name":"InMemorySecureStore"},"Classes/IdentifiableEntity.html#/s:6Common18IdentifiableEntityC2idxvp":{"name":"id","abstract":"<p>Undocumented</p>","parent_name":"IdentifiableEntity"},"Classes/IdentifiableEntity.html#/s:s8HashableP9hashValueSivp":{"name":"hashValue","parent_name":"IdentifiableEntity"},"Classes/IdentifiableEntity.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"IdentifiableEntity"},"Classes/IdentifiableEntity.html#/s:6Common18IdentifiableEntityCACyxGx2id_tcfc":{"name":"init(id:)","abstract":"<p>Creates new instance with provided identifier</p>","parent_name":"IdentifiableEntity"},"Classes/BaseID/Error.html#/s:6Common6BaseIDC5ErrorO07invalidC0A2EmF":{"name":"invalidID","abstract":"<p>the ID provided to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/BaseID.html#/s:6Common6BaseIDCACSSKcfc\">BaseID.init(...)</a></code> method is invalid.</p>","parent_name":"Error"},"Classes/BaseID/Error.html":{"name":"Error","abstract":"<p>Errors thrown if ID is invalid</p>","parent_name":"BaseID"},"Classes/BaseID.html#/s:6Common6BaseIDC2idSSvp":{"name":"id","abstract":"<p>Undocumented</p>","parent_name":"BaseID"},"Classes/BaseID.html#/s:s8HashableP9hashValueSivp":{"name":"hashValue","parent_name":"BaseID"},"Classes/BaseID.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"BaseID"},"Classes/BaseID.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"BaseID"},"Classes/BaseID.html#/s:6Common6BaseIDCACSSKcfc":{"name":"init(_:)","abstract":"<p>Creates new identifier from string. By default takes random UUID string.</p>","parent_name":"BaseID"},"Classes/AbstractRegistry.html#/s:6Common16AbstractRegistryC3putyx7service_xm3fortlFZ":{"name":"put(service:for:)","abstract":"<p>Stores the implementation of <code>type</code> service in memory.</p>","parent_name":"AbstractRegistry"},"Classes/AbstractRegistry.html#/s:6Common16AbstractRegistryC7servicexxm3for_tlFZ":{"name":"service(for:)","abstract":"<p>Returns stored service of type <code>type</code>. Crashes if implementation for the service was not found.</p>","parent_name":"AbstractRegistry"},"Classes/AbstractRegistry.html":{"name":"AbstractRegistry","abstract":"<p><code>AbstractRegistry</code> is the base class for service registries, implementing a simple dependency injection mechanism.</p>"},"Classes/BaseID.html":{"name":"BaseID","abstract":"<p>Base generic class for all UUID-based identifier classes, used to identify Entities.</p>"},"Classes/IdentifiableEntity.html":{"name":"IdentifiableEntity","abstract":"<p>Base class for an Entity with an identifier (immutable).</p>"},"Classes/InMemorySecureStore.html":{"name":"InMemorySecureStore","abstract":"<p>In-memory implementation of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SecureStore.html\">SecureStore</a></code> protocol, handy for unit tests.</p>"},"Classes/MockLogger.html":{"name":"MockLogger","abstract":"<p><code>MockLogger</code> implements <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Logger.html\">Logger</a></code> protocol for use in unit tests.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Global Variables.html":{"name":"Global Variables","abstract":"<p>The following global variables are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}