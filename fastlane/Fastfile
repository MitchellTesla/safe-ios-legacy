# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.107.0"

default_platform :ios

ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

platform :ios do

  before_all do
    RELEASE_APP_ID = ENV["FASTLANE_APP_IDENTIFIER"]
    ADHOC_APP_ID = RELEASE_APP_ID + ".adhoc"
    DEV_APP_ID = RELEASE_APP_ID + ".dev"
    PRERELEASE_APP_ID = RELEASE_APP_ID + ".prerelease"
    NOTIFICATION_SERVICE_EXTENSION_SUFFIX = ".remoteNotificationHandler"
    APP_BUILD_SCHEME = "safe"
    BUILD_LOG_PATH = "Build/build_logs"
    DERIVED_DATA_PATH = "."
    BUILD_PATH = "Build"
    ARCHIVE_PATH = "Build/Archive"
    OUTPUT_PATH = "Build/reports"
    workspace = "safe.xcworkspace"
    ENV["GYM_WORKSPACE"] = workspace
    ENV["SCAN_WORKSPACE"] = workspace
    PROJECT = "safe/safe.xcodeproj"
    KEYCHAIN_NAME="CI"
    KEYCHAIN_PASSWORD=ENV["KEYCHAIN_PASSWORD"]
    if is_ci
      if File.exist?(File.join(ENV["HOME"], "Library/Keychains/CI-db"))
        delete_keychain(name: KEYCHAIN_NAME)
      end
      create_keychain(name: KEYCHAIN_NAME,
        default_keychain: true,
        unlock: true,
        password: KEYCHAIN_PASSWORD,
        timeout: 3600,
        lock_when_sleeps: false)
      setup_jenkins(keychain_path: KEYCHAIN_NAME, 
        keychain_password: KEYCHAIN_PASSWORD,
        output_directory: OUTPUT_PATH,
        derived_data_path: DERIVED_DATA_PATH)
      increment_build_number(build_number: ENV["BUILD_NUMBER"], xcodeproj: PROJECT)
      ENV["MATCH_KEYCHAIN_NAME"] = KEYCHAIN_NAME
      ENV["MATCH_KEYCHAIN_PASSWORD"] = KEYCHAIN_PASSWORD
    end

    xcversion(version: "~> 11.0")
  end

  after_all do
    if is_ci
      delete_keychain(name: KEYCHAIN_NAME)
    end
  end

  desc "Runs tests"
  lane :test do |options|
    do_run_tests(scheme: options[:scheme])
  end

  def do_run_tests(params)
    set_bundle_id DEV_APP_ID
    sh "xcrun simctl erase 'iPhone X'"
    run_tests({configuration: "Debug", 
      skip_build: true, 
      slack_only_on_failure: true, 
      result_bundle: true,
      output_directory: OUTPUT_PATH,
      buildlog_path: BUILD_LOG_PATH,
      derived_data_path: DERIVED_DATA_PATH,
      xcargs: "'SWIFT_ENABLE_BATCH_MODE=NO'",
      devices: ['iPhone X']}.merge(params))
  end

  desc "Runs all tests"
  lane :test_all do
    do_run_tests(scheme: "allUITests")
    do_run_tests(scheme: APP_BUILD_SCHEME)
  end

  desc "Build and distribute build to Fabric Beta"
  lane :fabric do
    #NOTE: disabled until CI migration
    #test_all
    set_bundle_id ADHOC_APP_ID
    run_match("adhoc", ADHOC_APP_ID)
    gym(configuration: "AdHoc", 
      scheme: APP_BUILD_SCHEME, 
      buildlog_path: BUILD_LOG_PATH,
      derived_data_path: DERIVED_DATA_PATH,
      build_path: BUILD_PATH,
      archive_path: ARCHIVE_PATH)
    crashlytics(groups: "ios-beta-testers", notifications: false) 
    upload_crashlytics_dsyms
    slack(
     message: "Successfully distributed new AdHoc version to Fabric beta :rocket:",
    )
  end

  desc "Submit a new PreRelease Rinkeby Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :prerelease do
    do_submit_to_testflight(PRERELEASE_APP_ID, "PreRelease")
  end

  desc "Submit new Release (Production Mainnet) Build to Apple TestFlight"
  desc "This will also make sure the provisioning profile is up to date"
  lane :release do
    do_submit_to_testflight(RELEASE_APP_ID, "Release")
  end 

  def do_submit_to_testflight(app_id, configuration)
    set_bundle_id app_id
    version = get_version_number(xcodeproj: PROJECT, target: APP_BUILD_SCHEME)
    build_number = latest_testflight_build_number(app_identifier: app_id, 
      version: version,
      initial_build_number: 0)
    increment_build_number(
      build_number: build_number + 1,
      xcodeproj: PROJECT
    )
    run_match("appstore", app_id)
    gym(configuration: configuration,
      scheme: APP_BUILD_SCHEME, 
      include_symbols: true,
      include_bitcode: true,
      buildlog_path: BUILD_LOG_PATH,
      derived_data_path: DERIVED_DATA_PATH,
      build_path: BUILD_PATH,
      archive_path: ARCHIVE_PATH
      )
    pilot(skip_waiting_for_build_processing: true,
      app_identifier: app_id)
    slack(
     message: "Successfully distributed new #{configuration} version to TestFlight :rocket:",
    )
  end

  desc "Download latest dsyms"
  lane :testflight_dsyms do
    refresh_dsyms(PRERELEASE_APP_ID, true)
    refresh_dsyms(RELEASE_APP_ID, true)
    refresh_dsyms(PRERELEASE_APP_ID, false)
    refresh_dsyms(RELEASE_APP_ID, false)
  end

  desc "Adds devices from the ../gnosis-ios-certificates/devices.txt file"
  desc "Provide your FASTLANE_USER and FASTLANE_PASSWORD in environment variables."
  lane :add_devices do
    register_devices(devices_file: "../gnosis-ios-certificates/devices.txt")
    run_match("adhoc", ADHOC_APP_ID, true) # force
  end

  desc "Creates necessary App IDs." 
  desc "Provide your FASTLANE_USER and FASTLANE_PASSWORD in environment variables."
  lane :produce_app_ids do
    all_app_ids = ids_with_extension([RELEASE_APP_ID, PRERELEASE_APP_ID, DEV_APP_ID, ADHOC_APP_ID], NOTIFICATION_SERVICE_EXTENSION_SUFFIX)
    all_app_ids.each { |id| produce(app_identifier: id, skip_itc: true) }
  end

  desc "Downloads provisioning profiles and certificates. Creates missing ones if passed 'force:true' option."
  desc "If you pass 'force:true', then provide your FASTLANE_USER and FASTLANE_PASSWORD in environment variables."
  lane :certificates do |options|
    forced = options[:force]
    run_match("appstore", [RELEASE_APP_ID, PRERELEASE_APP_ID], forced)

    set_bundle_id ADHOC_APP_ID
    run_match("adhoc", ADHOC_APP_ID, forced)

    set_bundle_id DEV_APP_ID
    run_match("development", DEV_APP_ID, forced)
  end

  desc "Downloads translations from Lokalise and updates all Localizable.strings files in the project"
  lane :translate do
    sh "cd .. && scripts/pull_translations.sh Common IdentityAccess MultisigWallet SafeUIKit TestTools safe"
  end

  # Custom methods

  def set_bundle_id(id)
    ENV["FASTLANE_APP_IDENTIFIER"] = id
  end

  def refresh_dsyms(app_id, latest = false)
    set_bundle_id app_id
    if latest 
      download_dsyms(app_identifier: app_id, version: "latest", output_directory: BUILD_PATH)
    else
      build_number = get_build_number(xcodeproj: PROJECT)
      version = get_version_number(xcodeproj: PROJECT, target: APP_BUILD_SCHEME)
      download_dsyms(app_identifier: app_id,
        version: version,
        build_number: build_number,
        output_directory: BUILD_PATH)
    end
    upload_crashlytics_dsyms(BUILD_PATH)
  end

  def upload_crashlytics_dsyms(path = "Build/Archive.xcarchive/dSYMs")
    sh "cd ..; scripts/fabric-upload-symbols -a #{ENV["CRASHLYTICS_API_TOKEN"]} -p ios #{path}"
  end

  def run_match(type, ids, forced = false)
    match(type: type,
      app_identifier: ids_with_extension(ids, NOTIFICATION_SERVICE_EXTENSION_SUFFIX),
      readonly: !forced,
      force_for_new_devices: forced,
      clone_branch_directly: true)
  end

  def ids_with_extension(ids, extension)
    [ids].flatten.map { |id| [id, id + extension] }.flatten
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
    )
  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
